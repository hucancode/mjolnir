#version 450

// Depth pyramid reduction shader
// Performs 2x2 min-reduction to build hierarchical depth mipmap
// Based on Niagara implementation

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, r32f) uniform writeonly image2D outImage;
layout(binding = 1) uniform sampler2D inImage;

layout(push_constant) uniform PushConstants {
    vec2 imageSize;
};

void main() {
    uvec2 pos = gl_GlobalInvocationID.xy;

    // Check bounds
    if (pos.x >= uint(imageSize.x) || pos.y >= uint(imageSize.y)) {
        return;
    }

    // Sampler is set up to do min reduction with LINEAR filter
    // This computes the minimum depth of a 2x2 texel quad from the previous level
    vec2 uv = (vec2(pos) + vec2(0.5)) / imageSize;
    float depth = texture(inImage, uv).x;

    imageStore(outImage, ivec2(pos), vec4(depth));
}
