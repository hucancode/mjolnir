#version 450

const int MAX_EMITTERS = 64;
const int MAX_PARTICLES = 65536;

struct Particle {
    vec4 position;
    vec4 velocity;
    vec4 color_start;
    vec4 color_end;
    vec4 color;
    float size;
    float size_end;
    float life;
    float max_life;
    uint is_dead;
    float weight;
    float padding[2];
};

struct Emitter {
    mat4 transform;
    float emission_rate;
    float particle_lifetime;
    float position_spread;
    float velocity_spread;
    float time_accumulator;
    vec4 initial_velocity;
    vec4 color_start;
    vec4 color_end;
    float size_start;
    float size_end;
    uint enabled;
    float weight;
    float weight_spread;
    float padding[3];
};
layout(binding = 0) uniform ParamsBuffer {
    uint particle_count;
    uint emitter_count;
    float deltaTime;
    float padding;
};

layout(binding = 1) buffer ParticleBuffer {
    Particle particles[];
};

layout(binding = 2) buffer EmitterBuffer {
    Emitter emitters[];
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Random number generation
float rand(vec2 co) {
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec3 random_direction(vec3 base_dir, float spread, vec2 seed) {
    if (spread <= 0.0) return base_dir;

    float theta = rand(seed) * 2.0 * 3.14159265;
    float phi = acos(2.0 * rand(seed.yx) - 1.0);
    float r = spread * rand(seed * 2.0);

    vec3 random_offset = vec3(
        r * sin(phi) * cos(theta),
        r * sin(phi) * sin(theta),
        r * cos(phi)
    );

    return normalize(base_dir + random_offset);
}

const vec3 GRAVITY = vec3(0.0, -9.8, 0.0);

void main() {
    uint i = gl_GlobalInvocationID.x;
    if (i >= MAX_PARTICLES) return;

    // Skip dead particles - they don't need processing
    if (particles[i].is_dead != 0) return;

    if (particles[i].life > 0.0) {
        // Update particle physics
        particles[i].velocity.xyz += GRAVITY * particles[i].weight * deltaTime;
        particles[i].position += particles[i].velocity * deltaTime;
        particles[i].life -= deltaTime;

        // Update particle color based on life ratio
        float life_ratio = particles[i].life / particles[i].max_life;
        particles[i].color = mix(particles[i].color_end, particles[i].color_start, life_ratio);

        // Update particle size based on life ratio (interpolate from size to size_end)
        particles[i].size = mix(particles[i].size_end, particles[i].size, life_ratio);

        // Mark particle as dead if life is exhausted
        if (particles[i].life <= 0.0) {
            particles[i].is_dead = 1;
            particles[i].life = 0.0;
        }
    }
}
