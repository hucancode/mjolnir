#version 450

const int MAX_PARTICLES = 65536;
const int MAX_FORCE_FIELDS = 32;

struct Particle {
    vec4 position;
    vec4 velocity;
    vec4 color_start;
    vec4 color_end;
    vec4 color;
    float size;
    float size_end;
    float life;
    float max_life;
    float weight;
    uint texture_index;
    uint padding[6];
};

struct ForceField {
    float tangent_strength;
    float strength;
    float area_of_effect;
    float fade;
    uint node_index;
    uint visible;
    uint padding[2];
};

layout(set = 0, binding = 0) uniform ParamsBuffer {
    uint particle_count;
    uint emitter_count;
    uint forcefield_count;
    float delta_time;
};

layout(set = 0, binding = 1) buffer ParticleBuffer {
    Particle particles[];
};

layout(set = 0, binding = 2) buffer CompactCountBuffer {
    uint compact_count;
};

layout(set = 1, binding = 0) readonly buffer ForceFieldBuffer {
    ForceField forcefields[];
};

layout(set = 2, binding = 0) readonly buffer WorldMatrixBuffer {
    mat4 world_matrices[];
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Random number generation
float rand(vec2 co) {
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec3 random_direction(vec3 base_dir, float spread, vec2 seed) {
    if (spread <= 0.0) return base_dir;

    float theta = rand(seed) * 2.0 * 3.14159265;
    float phi = acos(2.0 * rand(seed.yx) - 1.0);
    float r = spread * rand(seed * 2.0);

    vec3 random_offset = vec3(
        r * sin(phi) * cos(theta),
        r * sin(phi) * sin(theta),
        r * cos(phi)
    );

    return normalize(base_dir + random_offset);
}

const vec3 GRAVITY = vec3(0.0, -9.8, 0.0);

void main() {
    uint i = gl_GlobalInvocationID.x;
    if (i >= compact_count) return;
    vec3 p = particles[i].position.xyz;
    // Process actual force fields, using the dynamic forcefield_count
    uint n = min(forcefield_count, MAX_FORCE_FIELDS);
    for (int f = 0; f < n; ++f) {
        ForceField ff = forcefields[f];
        // Ignore unused or invisible forcefields
        if (ff.visible == 0 || ff.area_of_effect <= 0.0) continue;
        vec3 ff_pos = (world_matrices[ff.node_index] * vec4(0, 0, 0, 1)).xyz;
        vec3 to_particle = p - ff_pos;
        float dist = length(to_particle);
        if (dist > ff.area_of_effect) continue;
        float effect = 1.0 - clamp(dist / ff.area_of_effect, 0.0, 1.0);
        vec3 dir = normalize(ff_pos - p);
        vec3 up = vec3(0, 1, 0);
        vec3 tangent = normalize(cross(up, dir));
        vec3 force =
            (dir * ff.strength) +
            (tangent * ff.tangent_strength);
        particles[i].velocity.xyz += force * effect * delta_time;
    }
    particles[i].velocity.xyz += GRAVITY * particles[i].weight * delta_time;
    // Apply velocity limiting to prevent excessive speeds
    float velMagnitude = min(length(particles[i].velocity.xyz), 5.0);
    particles[i].velocity.xyz = normalize(particles[i].velocity.xyz) * velMagnitude;
    particles[i].position.xyz += particles[i].velocity.xyz * delta_time;
    particles[i].life -= delta_time;
    float life_ratio = particles[i].life / particles[i].max_life;
    particles[i].color = mix(particles[i].color_end, particles[i].color_start, life_ratio);
    particles[i].size = mix(particles[i].size_end, particles[i].size, life_ratio);
}
