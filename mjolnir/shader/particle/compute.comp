#version 450

const int MAX_EMITTERS = 64;
const int MAX_PARTICLES = 65536;

struct Particle {
    vec4 position;
    vec4 velocity;
    vec4 color_start;
    vec4 color_end;
    vec4 color;
    float size;
    float life;
    float max_life;
    uint is_dead;
};

struct Emitter {
    mat4 transform;
    float emission_rate;
    float particle_lifetime;
    float velocity_spread;
    float time_accumulator;
    vec4 initial_velocity;
    vec4 color_start;
    vec4 color_end;
    float size_start;
    float size_end;
    uint enabled;
    float padding;
};
// Bindings
layout(binding = 0) uniform ParamsBuffer {
    uint particle_count;
    uint emitter_count;
    float deltaTime;
    float padding;
};

layout(binding = 1) buffer ParticleBuffer {
    Particle particles[];
};

layout(binding = 2) buffer EmitterBuffer {
    Emitter emitters[];
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Random number generation
float rand(vec2 co) {
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec3 random_direction(vec3 base_dir, float spread, vec2 seed) {
    if (spread <= 0.0) return base_dir;

    float theta = rand(seed) * 2.0 * 3.14159265;
    float phi = acos(2.0 * rand(seed.yx) - 1.0);
    float r = spread * rand(seed * 2.0);

    vec3 random_offset = vec3(
        r * sin(phi) * cos(theta),
        r * sin(phi) * sin(theta),
        r * cos(phi)
    );

    return normalize(base_dir + random_offset);
}

void main() {
    uint i = gl_GlobalInvocationID.x;
    if (i >= min(particle_count, MAX_PARTICLES)) return;
    // Update existing particles
    if (particles[i].life > 0.0) {
        // Update position
        particles[i].position += particles[i].velocity * deltaTime;
        // Update lifetime
        particles[i].life -= deltaTime;
        // Update color and size interpolation
        float life_ratio = particles[i].life / particles[i].max_life;
        particles[i].color = mix(particles[i].color_end, particles[i].color_start, life_ratio);
    }
}
