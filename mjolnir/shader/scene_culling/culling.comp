#version 450

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct NodeCullingData {
  vec3 aabb_min;           // xyz = min bounds
  uint culling_enabled;    // 0 = disabled, 1 = enabled
  vec3 aabb_max;           // xyz = max bounds
  uint padding;         // Align to 16 bytes
};

struct SceneCullingParams {
  vec4 frustum_planes[6];
  uint node_count;
  uint padding[3];
};

layout(set = 0, binding = 0) uniform SceneCullingParamsBuffer {
  SceneCullingParams params;
};

layout(set = 0, binding = 1) readonly buffer NodeDataBuffer {
  NodeCullingData nodes[];
};

layout(set = 0, binding = 2) writeonly buffer VisibilityBuffer {
  uint visibility[];
};

bool test_point_in_frustum(vec3 p) {
  for (int i = 0; i < 6; i++) {
    float distance = dot(params.frustum_planes[i].xyz, p) + params.frustum_planes[i].w;
    if (distance < 0.0) {
      return false;
    }
  }
  return true;
}
bool test_aabb_frustum(vec3 aabb_min, vec3 aabb_max) {
  // For each frustum plane, test if the AABB is completely on the negative side
  for (int i = 0; i < 6; i++) {
    vec4 plane = params.frustum_planes[i];
    vec3 plane_normal = plane.xyz;
    // Find the "positive" vertex of the AABB relative to the plane normal
    // The positive vertex is the one furthest in the direction of the plane normal
    vec3 positive_vertex;
    // For each axis, choose min or max based on plane normal direction
    if (plane_normal.x >= 0.0) {
      positive_vertex.x = aabb_max.x;
    } else {
      positive_vertex.x = aabb_min.x;
    }
    if (plane_normal.y >= 0.0) {
      positive_vertex.y = aabb_max.y;
    } else {
      positive_vertex.y = aabb_min.y;
    }
    if (plane_normal.z >= 0.0) {
      positive_vertex.z = aabb_max.z;
    } else {
      positive_vertex.z = aabb_min.z;
    }
    // If the positive vertex is on the negative side of the plane, the entire AABB is outside
    float distance = dot(plane_normal, positive_vertex) + plane.w;
    if (distance < 0.0) {
      return false;
    }
  }
  // If we get here, the AABB is not completely outside any plane, so it intersects the frustum
  return true;
}

void main() {
  uint node_id = gl_GlobalInvocationID.x;
  if (node_id >= params.node_count) {
    return;
  }
  NodeCullingData node = nodes[node_id];
  if (node.culling_enabled == 0) {
    visibility[node_id] = 1;  // If culling is disabled, object is always visible
    return;
  }
  bool is_visible = test_aabb_frustum(node.aabb_min, node.aabb_max);
  visibility[node_id] = is_visible ? 1 : 0;
}
