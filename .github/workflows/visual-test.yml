name: Visual Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  run-and-compare-images:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Odin
      uses: laytan/setup-odin@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Compile Odin vendor library
      run: |
        make -C /home/runner/odin/vendor/stb/src
        make -C /home/runner/odin/vendor/cgltf/src

    - name: Setup Vulkan SDK
      uses: humbletim/install-vulkan-sdk@v1.2
      with:
        version: 1.4.321.1
        cache: true

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xvfb \
          libglfw3-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          mesa-vulkan-drivers \
          vulkan-tools \
          x11-utils \
          python3-pip \
          gdb
        sudo ln -sf /usr/lib/x86_64-linux-gnu/libglfw.so.3 /usr/lib/x86_64-linux-gnu/libglfw.so
        pip install scikit-image numpy

    - name: Inspect Vulkan SDK assets
      run: |
        echo "Layers:" && find "$VULKAN_SDK" -maxdepth 4 -name 'VkLayer_screenshot.json' || true
        echo "Layer libraries:" && find "$VULKAN_SDK" -maxdepth 4 -name 'libVkLayer_screenshot.so' || true
        echo "ICDs:" && ls -1 /usr/share/vulkan/icd.d || true

    - name: Build shader
      run: make shader

    - name: Query Vulkan device capabilities
      env:
        VK_ICD_FILENAMES: /usr/share/vulkan/icd.d/lvp_icd.x86_64.json
      run: |
        export LD_LIBRARY_PATH="$VULKAN_SDK/lib:$VULKAN_SDK/lib64:${LD_LIBRARY_PATH:-}"
        echo "=== Vulkan Instance Info ==="
        vulkaninfo --summary || true
        echo ""
        echo "=== Available Devices ==="
        vulkaninfo | grep -A 20 "^GPU" || true
        echo ""
        echo "=== Device Features ==="
        vulkaninfo | grep -A 50 "VkPhysicalDeviceFeatures" || true
        echo ""
        echo "=== Device Limits ==="
        vulkaninfo | grep -A 30 "VkPhysicalDeviceLimits" || true

    - name: Run visual tests
      env:
        VK_LAYER_PATH: ${{ env.VULKAN_SDK }}/etc/vulkan/explicit_layer.d:${{ env.VULKAN_SDK }}/share/vulkan/explicit_layer.d
        VK_ICD_FILENAMES: /usr/share/vulkan/icd.d/lvp_icd.x86_64.json
      run: |
        export LD_LIBRARY_PATH="$VULKAN_SDK/lib:$VULKAN_SDK/lib64:${LD_LIBRARY_PATH:-}"
        make vtest
    - name: Smoke test
      env:
        VK_LAYER_PATH: ${{ env.VULKAN_SDK }}/etc/vulkan/explicit_layer.d:${{ env.VULKAN_SDK }}/share/vulkan/explicit_layer.d
        VK_ICD_FILENAMES: /usr/share/vulkan/icd.d/lvp_icd.x86_64.json
        VK_INSTANCE_LAYERS: VK_LAYER_LUNARG_screenshot
        VK_SCREENSHOT_FRAMES: 3
        VK_SCREENSHOT_DIR: ${{ github.workspace }}/artifacts/main
      run: |
        export LD_LIBRARY_PATH="$VULKAN_SDK/lib:$VULKAN_SDK/lib64:${LD_LIBRARY_PATH:-}"
        mkdir -p "$VK_SCREENSHOT_DIR"
        odin build . -out:bin/main -define:USE_PARALLEL_UPDATE=false -define:FRAME_LIMIT=10
        xvfb-run -a -s "-screen 0 1920x1080x24" ./bin/main
        ppm=$(find "$VK_SCREENSHOT_DIR" -name '*.ppm' | head -1)
        if [ -z "$ppm" ]; then
          echo "ERROR: No screenshot generated"
          exit 1
        fi
        python3 -c "
        from skimage import io; import numpy as np
        img = io.imread('$ppm')
        colors = len(np.unique(img.reshape(-1, img.shape[2]), axis=0))
        pixels = img.shape[0] * img.shape[1]
        print(f'Colors: {colors}, Pixels: {pixels}')
        assert 1000 < colors < pixels // 2, f'Invalid color count: {colors}'
        "
        echo "Smoke test passed!"
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: artifacts
        path: |
          artifacts
          game_output.log
