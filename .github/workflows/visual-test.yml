name: Visual Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  run-and-compare-images:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Odin
      uses: laytan/setup-odin@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Compile Odin vendor library
      run: |
        make -C /home/runner/odin/vendor/stb/src
        make -C /home/runner/odin/vendor/cgltf/src

    - name: Setup Vulkan SDK
      uses: humbletim/install-vulkan-sdk@v1.2
      with:
        version: 1.4.321.1
        cache: true

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xvfb \
          libglfw3-dev \
          imagemagick \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          mesa-vulkan-drivers \
          vulkan-tools \
          x11-utils
        sudo ln -sf /usr/lib/x86_64-linux-gnu/libglfw.so.3 /usr/lib/x86_64-linux-gnu/libglfw.so

    - name: Inspect Vulkan SDK assets
      run: |
        echo "Layers:" && find "$VULKAN_SDK" -maxdepth 4 -name 'VkLayer_screenshot.json' || true
        echo "Layer libraries:" && find "$VULKAN_SDK" -maxdepth 4 -name 'libVkLayer_screenshot.so' || true
        echo "ICDs:" && ls -1 /usr/share/vulkan/icd.d || true

    - name: Build shader
      run: make shader

    - name: Run visual scenes and capture screenshots
      env:
        VK_LAYER_PATH: ${{ env.VULKAN_SDK }}/etc/vulkan/explicit_layer.d:${{ env.VULKAN_SDK }}/share/vulkan/explicit_layer.d
        VK_ICD_FILENAMES: /usr/share/vulkan/icd.d/lvp_icd.x86_64.json
        # VK_LOADER_DEBUG: all
        RMSE_THRESHOLD: 100
      run: |
        export LD_LIBRARY_PATH="$VULKAN_SDK/lib:$VULKAN_SDK/lib64:${LD_LIBRARY_PATH:-}"
        tests=()
        while IFS= read -r -d '' path; do
          name=$(basename "$path")
          if [ "$name" = "common" ]; then
            continue
          fi
          tests+=("$name")
        done < <(find test/visual -mindepth 1 -maxdepth 1 -type d -print0 | sort -z)
        failures=()
        for test in "${tests[@]}"; do
          echo "Executing visual test: $test"
          if ! ./test/visual/run.sh "$test" artifacts; then
            echo "Test failed: $test" >&2
            failures+=("$test")
          fi
        done
        if [ ${#failures[@]} -ne 0 ]; then
          echo "Visual tests failed: ${failures[*]}" >&2
          exit 1
        fi
    - name: Smoke test
      env:
        VK_LAYER_PATH: ${{ env.VULKAN_SDK }}/etc/vulkan/explicit_layer.d:${{ env.VULKAN_SDK }}/share/vulkan/explicit_layer.d
        VK_ICD_FILENAMES: /usr/share/vulkan/icd.d/lvp_icd.x86_64.json
        VK_SCREENSHOT_FRAMES: 3
        VK_SCREENSHOT_DIR: ${{ github.workspace }}/mjolnir/mjolnir/artifacts
      run: |
        set -euo pipefail
        export LD_LIBRARY_PATH="$VULKAN_SDK/lib:$VULKAN_SDK/lib64:${LD_LIBRARY_PATH:-}"
        mkdir -p $VK_SCREENSHOT_DIR
        set +e
        make build
        xvfb-run -a -s "-screen 0 1920x1080x24" \
          timeout 30s ./bin/main >"$VK_SCREENSHOT_DIR/main.log" 2>&1
        status=$?
        set -e
        if [ $status -ne 0 ] && [ $status -ne 124 ]; then
          echo "Main demo execution failed with status $status" >&2
          exit $status
        fi
        ppm=$(find "$VK_SCREENSHOT_DIR" -maxdepth 1 -name '*.ppm' | sort | head -n 1)
        if [ -z "$ppm" ]; then
          echo "No screenshot captured for main demo" >&2
          exit 1
        fi
        unique_colors=$(magick identify -format "%k" "$ppm")
        read -r width height <<< "$(magick identify -format "%w %h" "$ppm")"
        pixels=$((width * height))
        echo "Unique colors: $unique_colors"
        echo "Pixel count: $pixels"
        if [ "$unique_colors" -le 1000 ]; then
          echo "Unique color count too low: $unique_colors" >&2
          exit 1
        fi
        if [ $((unique_colors * 2)) -ge "$pixels" ]; then
          echo "Unique color count too high relative to total pixels: $unique_colors vs $pixels" >&2
          exit 1
        fi
        echo "Main demo color diversity within expected range"
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: artifacts
        path: |
          artifacts
          game_output.log
